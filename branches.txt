1. git checkout -b name - создать и переключиться на
указанную ветку.
2. git branch - посмотреть список веток.
3. git checkout -f - отменить незакомиченные изменения,
в ситуациях если нужно переключиться на другую ветку
и мы понимаем что внесенные изменения не важны
либо покодили и поняли что код не подходит
можно так же быстро убрать код.
4. git stash / git stash pop - разобрать позже!!!
5. git reset - на какой коммит хотим вернуться
5.1 git reset --hard 2fad - откатить на указанный коммит.
~ - родитель; @ - HEAD;
ЛИБО удалить из индекса и рабочей директории незакомиченные
изменения.

git commit -am "message": git add + git commit -m;

HEAD - указатель на текущую ветку.

если нужно переключиться с незакомиченными изменениями:
git checkout -f nameBranch
если нужно переключиться и сохранить изменения но не коммитить:
git stash
вернуть:
git stash pop
НО может возникнуть конфликт,
если файл который изменяли и который будем менять один и тот же.
НО если мы внесем изменения в файл, и получим файл, равный файлу, на ветку которого хотим
переключиться, то ошибки не будет.


===============================================================
Если начал писать в master и изменения НЕ ЗАКОМИТТИЛ, то в после выполнения задачи,
git checkout -b fix, и создастся ветка fix,
затем commit -am "message" и HEAD будет указывать на текущий коммит.


===============================================================
Если начал писать в master и изменения ЗАКОМИТТИЛ!!!, то
1. Создать новую ветку - git checkout -b fix
2. Перенести HEAD ветки master на указанный коммит с флагом force: - git branch -f master 54f4
либо: git checkout -B master 54f4

===============================================================
можно переключаться на отдельные коммиты:
git checkout 54f3, НО! происходит появление состояния: detached HEAD - отделенная head.
Проблема в том, что если продолжить разработку в ветке в которую переключились по коммиту,
потом вернуться можно будет только зная идентификатор коммита,
а со временем такие коммиты будут удалены,
поэтому решение:
1. создать новую ветку - git checkout -b fix
2. git cherry-pick 54f3 - подтянуть коммит куда нужно.

===============================================================
Если необходимо вернуть файл n коммитов назад:

git checkout 43f3(из какого коммита взять) file.txt(1 или несколько файлов)
подтягивает указанный файл/файлы в РАБОЧУЮ ДИРЕКТОРИЮ И ИНДЕКС
Если хотим вернуть какой был:
git checkout HEAD file.txt


===============================================================
git log - просмотреть коммиты
git log --oneline - коммит на одной строке
git log master --oneline - коммиты на одной строке ветки master
git show 23f2 посмотреть конкретный коммит
git show HEAD~3  3 коммита назад либо git show @~3
git show @~: file.txt - просмотреть файл на момент определенного коммита
git show :/nameFunction - найти файл содержащий данную строку

===============================================================

Слияние веток:

1. git checkout master - переключаемся на ветку, к которой хотим подтянуть изменения.
2. git merge fix
3. ЕСЛИ ХОТИМ ВЕРНУТЬ: git branch -f master ORIG_HEAD

===============================================================

Удаление веток:

1. git branch -d fix - удалит без проблем если было объединение с веткой master / либо другой.
2. Если ветка не объединена - error!, НО если все равно хотим удалить данную ветку, то
git branch -D fix
Если хотим вернуть удаленную ветку, то git branch newFix 2f12(идентификатор удаленного коммита, если помним его)
Если не помним, то

===============================================================

git reflog - reference log

Применение:

1. Просмотреть коммиты, которые были на ветке, которая уже удалена,
но когда-то HEAD на них находилась.

2.

git reflog master

git reflog --date=iso

Срок хранения:
Если удален - 30 дней, обычно - 90 дней.




























